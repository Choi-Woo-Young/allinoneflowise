name: all_in_one_flowise

services:
  # 챗봇용 RDB: PostgreSQL
  pgdb:
    image: postgres:15
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: nice1234!!
      POSTGRES_DB: flowise_db
    volumes:
      - ./postgresql/data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - internal_net

  # RDB 관리용: Adminer (선택 사항)
  adminer:
    image: adminer:4.17.1
    container_name: adminer
    restart: always
    ports:
      - "8080:8080"
    networks:
      - internal_net

  # 큐: Redis
  redis:
    image: redis:7.4.2
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - internal_net

  redis-commander:
    image: rediscommander/redis-commander:snyk-fix-08c85f17c94a7f00df6fb21e8ea1d10d
    container_name: redis-commander
    restart: always
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    networks:
      - internal_net

  # 벡터DB: Qdrant
  qdrant:
    image: qdrant/qdrant:v1.13.4
    container_name: qdrant
    ports:
      - "6333:6333"
    volumes:
      - ./qdrant/storage:/qdrant/storage
    restart: always
    networks:
      - internal_net

  # 벡터DB: Chroma
  # https://docs.trychroma.com/production/containers/docker
  # chroma:
  #   image: chromadb/chroma:1.0.5.dev24
  #   container_name: chroma
  #   volumes:
  #     - ./chromadb:/chroma/chroma
  #   ports:
  #     - "8000:8000"
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8000/api/v2/heartbeat"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #   networks:
  #     - internal_net

    # Unstructured API - unstructured file loader
  # unstructured-api:
  #   image: all_in_one_flowise-unstructured-api-amd:0.1
  #   container_name: unstructured-api
  #   restart: always
  #   # platform: linux/amd64
  #   ports:
  #     - "8082:8082"
  #   environment:
  #     - PORT=8082
  #   networks:
  #     - internal_net
  # AI 챗봇 솔루션: Flowise (내부 DB로 PostgreSQL 사용)
  flowise:
    image: flowiseai/flowise:2.2.7-patch.1 #flowisegit:latest #flowiseai/flowise
    # build:
    #   context: .
    #   dockerfile: ./flowise/Dockerfile-navis
    container_name: flowise
    restart: always
    environment:
      - PORT=3000
      - CORS_ORIGINS=*
      - IFRAME_ORIGINS=*
      - FLOWISE_USERNAME=admin
      - FLOWISE_PASSWORD=nice1234!!
      - FLOWISE_FILE_SIZE_LIMIT=50MB
      - DEBUG=true
      - DATABASE_PATH=/root/.flowise
      - DATABASE_TYPE=postgres
      - DATABASE_PORT=5432
      - DATABASE_HOST=postgres_db
      - DATABASE_NAME=flowise_db
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=nice1234!!
      - DATABASE_SSL=false
      - APIKEY_STORAGE_TYPE=db
      - APIKEY_PATH=/root/.flowise
      - SECRETKEY_PATH=/root/.flowise
      - FLOWISE_SECRETKEY_OVERWRITE=false
      - LOG_LEVEL=debug
      - LOG_PATH=/root/.flowise/logs
      - BLOB_STORAGE_PATH=/root/.flowise/storage
      - DISABLE_FLOWISE_TELEMETRY=true
      - GLOBAL_AGENT_HTTP_PROXY=
      - GLOBAL_AGENT_HTTPS_PROXY=
      - GLOBAL_AGENT_NO_PROXY=
      - DISABLED_NODES=
      - MODE=production
      - WORKER_CONCURRENCY=1
      - QUEUE_NAME=flowise_queue
      - QUEUE_REDIS_EVENT_STREAM_MAX_LEN=100
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_USERNAME=
      - REDIS_TLS=false
      - REDIS_CERT=
      - REDIS_KEY=
      - REDIS_CA=

    ports:
      - "3000:3000"
    volumes:
      - ./flowise:/root/.flowise
      - ./flowise/data:/data
    #entrypoint: /bin/sh -c "sleep 3; flowise start"
    depends_on:
      - pgdb
      - qdrant
      # - chroma
      - redis
    networks:
      - internal_net

  # 웹서버: Nginx (리버스 프록시 역할, Flowise로 트래픽 전달)
  nginx:
    image: nginx:1.27.4
    container_name: nginx_web
    depends_on:
      - flowise
    ports:
      - "80:80"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
    restart: always
    networks:
      - internal_net

networks:
  internal_net:
    driver: bridge
